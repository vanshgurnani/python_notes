{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"7","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNlrNZdR3xzR69Ny/UTkzc4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**What is SciPy?**\n","\n","SciPy is a scientific computation library that uses NumPy underneath.\n","\n","SciPy stands for Scientific Python.\n","\n","It provides more utility functions for optimization, stats and signal processing.\n","\n","Like NumPy, SciPy is open source so we can use it freely.\n","\n","SciPy was created by NumPy's creator Travis Olliphant.\n","\n","**Why Use SciPy?**\n","\n","If SciPy uses NumPy underneath, why can we not just use NumPy?\n","\n","SciPy has optimized and added functions that are frequently used in NumPy and Data Science.\n","\n","**Which Language is SciPy Written in?**\n","\n","SciPy is predominantly written in Python, but a few segments are written in C."],"metadata":{"id":"i41SbIFy49fK"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZldKBX6XSdrw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1646329884888,"user_tz":-330,"elapsed":6,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"4e13160d-7aae-49a7-d11a-97848ff71aae"},"outputs":[{"output_type":"stream","name":"stdout","text":["0.001\n","1.4.1\n"]}],"source":["# importing scipy\n","from scipy import constants\n","print(constants.liter)\n","# checking version\n","import scipy\n","print(scipy.__version__)"]},{"cell_type":"markdown","source":["**Constants in SciPy**\n","\n","As SciPy is more focused on scientific implementations, it provides many built-in scientific constants.\n","\n","These constants can be helpful when you are working with Data Science.\n","\n","**PI is an example of a scientific constant.**"],"metadata":{"id":"CVu2DAeL7CNr"}},{"cell_type":"code","source":["from scipy import constants as ct\n","print(ct.pi)"],"metadata":{"id":"lYKrxsXt5sr2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1646363772837,"user_tz":-330,"elapsed":398,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"e2fb2769-023f-4d07-c337-95974107996c"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["3.141592653589793\n"]}]},{"cell_type":"markdown","source":["**Constant Units**\n","\n","A list of all units under the constants module can be seen using the dir() function."],"metadata":{"id":"sCBQ2ijV9k-g"}},{"cell_type":"code","source":["from scipy import constants\n","print(dir(constants))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_B8nw1857P-E","executionInfo":{"status":"ok","timestamp":1646364419058,"user_tz":-330,"elapsed":403,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"65ed8709-bfde-4713-92de-2643445533e5"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["['Avogadro', 'Boltzmann', 'Btu', 'Btu_IT', 'Btu_th', 'ConstantWarning', 'G', 'Julian_year', 'N_A', 'Planck', 'R', 'Rydberg', 'Stefan_Boltzmann', 'Wien', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '_obsolete_constants', 'absolute_import', 'acre', 'alpha', 'angstrom', 'arcmin', 'arcminute', 'arcsec', 'arcsecond', 'astronomical_unit', 'atm', 'atmosphere', 'atomic_mass', 'atto', 'au', 'bar', 'barrel', 'bbl', 'blob', 'c', 'calorie', 'calorie_IT', 'calorie_th', 'carat', 'centi', 'codata', 'constants', 'convert_temperature', 'day', 'deci', 'degree', 'degree_Fahrenheit', 'deka', 'division', 'dyn', 'dyne', 'e', 'eV', 'electron_mass', 'electron_volt', 'elementary_charge', 'epsilon_0', 'erg', 'exa', 'exbi', 'femto', 'fermi', 'find', 'fine_structure', 'fluid_ounce', 'fluid_ounce_US', 'fluid_ounce_imp', 'foot', 'g', 'gallon', 'gallon_US', 'gallon_imp', 'gas_constant', 'gibi', 'giga', 'golden', 'golden_ratio', 'grain', 'gram', 'gravitational_constant', 'h', 'hbar', 'hectare', 'hecto', 'horsepower', 'hour', 'hp', 'inch', 'k', 'kgf', 'kibi', 'kilo', 'kilogram_force', 'kmh', 'knot', 'lambda2nu', 'lb', 'lbf', 'light_year', 'liter', 'litre', 'long_ton', 'm_e', 'm_n', 'm_p', 'm_u', 'mach', 'mebi', 'mega', 'metric_ton', 'micro', 'micron', 'mil', 'mile', 'milli', 'minute', 'mmHg', 'mph', 'mu_0', 'nano', 'nautical_mile', 'neutron_mass', 'nu2lambda', 'ounce', 'oz', 'parsec', 'pebi', 'peta', 'physical_constants', 'pi', 'pico', 'point', 'pound', 'pound_force', 'precision', 'print_function', 'proton_mass', 'psi', 'pt', 'short_ton', 'sigma', 'slinch', 'slug', 'speed_of_light', 'speed_of_sound', 'stone', 'survey_foot', 'survey_mile', 'tebi', 'tera', 'test', 'ton_TNT', 'torr', 'troy_ounce', 'troy_pound', 'u', 'unit', 'value', 'week', 'yard', 'year', 'yobi', 'yotta', 'zebi', 'zepto', 'zero_Celsius', 'zetta']\n"]}]},{"cell_type":"markdown","source":["**Unit Categories**\n","\n","The units are placed under these categories:\n","\n","Metric\n","Binary\n","Mass\n","Angle\n","Time\n","Length\n","Pressure\n","Volume\n","Speed\n","Temperature\n","Energy\n","Power\n","Force"],"metadata":{"id":"JjhVwG6X99oD"}},{"cell_type":"code","source":["# Metric (SI) Prefixes\n","from scipy import constants\n","\n","print(constants.yotta)    #1e+24\n","print(constants.zetta)    #1e+21\n","print(constants.exa)      #1e+18\n","print(constants.peta)     #1000000000000000.0\n","print(constants.tera)     #1000000000000.0\n","print(constants.giga)     #1000000000.0\n","print(constants.mega)     #1000000.0\n","print(constants.kilo)     #1000.0\n","print(constants.hecto)    #100.0\n","print(constants.deka)     #10.0\n","print(constants.deci)     #0.1\n","print(constants.centi)    #0.01\n","print(constants.milli)    #0.001\n","print(constants.micro)    #1e-06\n","print(constants.nano)     #1e-09\n","print(constants.pico)     #1e-12\n","print(constants.femto)    #1e-15\n","print(constants.atto)     #1e-18\n","print(constants.zepto)    #1e-21"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lr6-AWz19sb2","executionInfo":{"status":"ok","timestamp":1646364533635,"user_tz":-330,"elapsed":6,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"2f5e987e-e27a-45e0-cdd7-76b04702b1be"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["1e+24\n","1e+21\n","1e+18\n","1000000000000000.0\n","1000000000000.0\n","1000000000.0\n","1000000.0\n","1000.0\n","100.0\n","10.0\n","0.1\n","0.01\n","0.001\n","1e-06\n","1e-09\n","1e-12\n","1e-15\n","1e-18\n","1e-21\n"]}]},{"cell_type":"code","source":["# Binary Prefixes\n","from scipy import constants\n","\n","print(constants.kibi)    #1024\n","print(constants.mebi)    #1048576\n","print(constants.gibi)    #1073741824\n","print(constants.tebi)    #1099511627776\n","print(constants.pebi)    #1125899906842624\n","print(constants.exbi)    #1152921504606846976\n","print(constants.zebi)    #1180591620717411303424\n","print(constants.yobi)    #1208925819614629174706176"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xh79luYy-R20","executionInfo":{"status":"ok","timestamp":1646364582899,"user_tz":-330,"elapsed":7,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"04ae3087-e9af-462d-dde6-b86959ba8a7c"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["1024\n","1048576\n","1073741824\n","1099511627776\n","1125899906842624\n","1152921504606846976\n","1180591620717411303424\n","1208925819614629174706176\n"]}]},{"cell_type":"code","source":["# Mass\n","from scipy import constants\n","\n","print(constants.gram)        #0.001\n","print(constants.metric_ton)  #1000.0\n","print(constants.grain)       #6.479891e-05\n","print(constants.lb)          #0.45359236999999997\n","print(constants.pound)       #0.45359236999999997\n","print(constants.oz)          #0.028349523124999998\n","print(constants.ounce)       #0.028349523124999998\n","print(constants.stone)       #6.3502931799999995\n","print(constants.long_ton)    #1016.0469088\n","print(constants.short_ton)   #907.1847399999999\n","print(constants.troy_ounce)  #0.031103476799999998\n","print(constants.troy_pound)  #0.37324172159999996\n","print(constants.carat)       #0.0002\n","print(constants.atomic_mass) #1.66053904e-27\n","print(constants.m_u)         #1.66053904e-27\n","print(constants.u)           #1.66053904e-27"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tUW6U5ur-d6p","executionInfo":{"status":"ok","timestamp":1646364639932,"user_tz":-330,"elapsed":8,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"c3594a4a-7f82-44e0-e8d7-7dccbc96c594"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["0.001\n","1000.0\n","6.479891e-05\n","0.45359236999999997\n","0.45359236999999997\n","0.028349523124999998\n","0.028349523124999998\n","6.3502931799999995\n","1016.0469088\n","907.1847399999999\n","0.031103476799999998\n","0.37324172159999996\n","0.0002\n","1.6605390666e-27\n","1.6605390666e-27\n","1.6605390666e-27\n"]}]},{"cell_type":"code","source":["# Angle\n","from scipy import constants\n","\n","print(constants.degree)     #0.017453292519943295\n","print(constants.arcmin)     #0.0002908882086657216\n","print(constants.arcminute)  #0.0002908882086657216\n","print(constants.arcsec)     #4.84813681109536e-06\n","print(constants.arcsecond)  #4.84813681109536e-06"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"InHYcHir-r1h","executionInfo":{"status":"ok","timestamp":1646364662470,"user_tz":-330,"elapsed":7,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"7f8b38f2-128d-4939-a8c9-2ee9eb3ee51d"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["0.017453292519943295\n","0.0002908882086657216\n","0.0002908882086657216\n","4.84813681109536e-06\n","4.84813681109536e-06\n"]}]},{"cell_type":"code","source":["# Time\n","from scipy import constants\n","\n","print(constants.minute)      #60.0\n","print(constants.hour)        #3600.0\n","print(constants.day)         #86400.0\n","print(constants.week)        #604800.0\n","print(constants.year)        #31536000.0\n","print(constants.Julian_year) #31557600.0\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Op-gutQC-xY_","executionInfo":{"status":"ok","timestamp":1646364692673,"user_tz":-330,"elapsed":8,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"79278c8c-a455-47e3-9767-29ebbbd791a8"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["60.0\n","3600.0\n","86400.0\n","604800.0\n","31536000.0\n","31557600.0\n"]}]},{"cell_type":"code","source":["# Length\n","from scipy import constants\n","\n","print(constants.inch)              #0.0254\n","print(constants.foot)              #0.30479999999999996\n","print(constants.yard)              #0.9143999999999999\n","print(constants.mile)              #1609.3439999999998\n","print(constants.mil)               #2.5399999999999997e-05\n","print(constants.pt)                #0.00035277777777777776\n","print(constants.point)             #0.00035277777777777776\n","print(constants.survey_foot)       #0.3048006096012192\n","print(constants.survey_mile)       #1609.3472186944373\n","print(constants.nautical_mile)     #1852.0\n","print(constants.fermi)             #1e-15\n","print(constants.angstrom)          #1e-10\n","print(constants.micron)            #1e-06\n","print(constants.au)                #149597870691.0\n","print(constants.astronomical_unit) #149597870691.0\n","print(constants.light_year)        #9460730472580800.0\n","print(constants.parsec)            #3.0856775813057292e+16\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lFHH1ENs-4sJ","executionInfo":{"status":"ok","timestamp":1646364742125,"user_tz":-330,"elapsed":6,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"04c7a62b-1a92-43c1-989b-b7400a0b5d84"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["0.0254\n","0.30479999999999996\n","0.9143999999999999\n","1609.3439999999998\n","2.5399999999999997e-05\n","0.00035277777777777776\n","0.00035277777777777776\n","0.3048006096012192\n","1609.3472186944373\n","1852.0\n","1e-15\n","1e-10\n","1e-06\n","149597870700.0\n","149597870700.0\n","9460730472580800.0\n","3.085677581491367e+16\n"]}]},{"cell_type":"code","source":["# Pressure\n","from scipy import constants\n","\n","print(constants.atm)         #101325.0\n","print(constants.atmosphere)  #101325.0\n","print(constants.bar)         #100000.0\n","print(constants.torr)        #133.32236842105263\n","print(constants.mmHg)        #133.32236842105263\n","print(constants.psi)         #6894.757293168361\n","# Area\n","from scipy import constants\n","\n","print(constants.hectare) #10000.0\n","print(constants.acre)    #4046.8564223999992\n","# Volume\n","from scipy import constants\n","\n","print(constants.liter)            #0.001\n","print(constants.litre)            #0.001\n","print(constants.gallon)           #0.0037854117839999997\n","print(constants.gallon_US)        #0.0037854117839999997\n","print(constants.gallon_imp)       #0.00454609\n","print(constants.fluid_ounce)      #2.9573529562499998e-05\n","print(constants.fluid_ounce_US)   #2.9573529562499998e-05\n","print(constants.fluid_ounce_imp)  #2.84130625e-05\n","print(constants.barrel)           #0.15898729492799998\n","print(constants.bbl)              #0.15898729492799998\n","\n","#Speed\n","from scipy import constants\n","\n","print(constants.kmh)            #0.2777777777777778\n","print(constants.mph)            #0.44703999999999994\n","print(constants.mach)           #340.5\n","print(constants.speed_of_sound) #340.5\n","print(constants.knot)           #0.5144444444444445\n","\n","# Temperature\n","from scipy import constants\n","\n","print(constants.zero_Celsius)      #273.15\n","print(constants.degree_Fahrenheit) #0.5555555555555556\n","\n","# Energy\n","from scipy import constants\n","\n","print(constants.eV)            #1.6021766208e-19\n","print(constants.electron_volt) #1.6021766208e-19\n","print(constants.calorie)       #4.184\n","print(constants.calorie_th)    #4.184\n","print(constants.calorie_IT)    #4.1868\n","print(constants.erg)           #1e-07\n","print(constants.Btu)           #1055.05585262\n","print(constants.Btu_IT)        #1055.05585262\n","print(constants.Btu_th)        #1054.3502644888888\n","print(constants.ton_TNT)       #4184000000.0\n","# Power\n","from scipy import constants\n","\n","print(constants.hp)         #745.6998715822701\n","print(constants.horsepower) #745.6998715822701\n","# Force:\n","from scipy import constants\n","\n","print(constants.dyn)             #1e-05\n","print(constants.dyne)            #1e-05\n","print(constants.lbf)             #4.4482216152605\n","print(constants.pound_force)     #4.4482216152605\n","print(constants.kgf)             #9.80665\n","print(constants.kilogram_force)  #9.80665\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eI8NHOxP_Ev8","executionInfo":{"status":"ok","timestamp":1646364907716,"user_tz":-330,"elapsed":12,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"661d9263-1a82-4cce-9c45-a0667e55ae66"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["101325.0\n","101325.0\n","100000.0\n","133.32236842105263\n","133.32236842105263\n","6894.757293168361\n","10000.0\n","4046.8564223999992\n","0.001\n","0.001\n","0.0037854117839999997\n","0.0037854117839999997\n","0.00454609\n","2.9573529562499998e-05\n","2.9573529562499998e-05\n","2.84130625e-05\n","0.15898729492799998\n","0.15898729492799998\n","0.2777777777777778\n","0.44703999999999994\n","340.5\n","340.5\n","0.5144444444444445\n","273.15\n","0.5555555555555556\n","1.602176634e-19\n","1.602176634e-19\n","4.184\n","4.184\n","4.1868\n","1e-07\n","1055.05585262\n","1055.05585262\n","1054.3502644888888\n","4184000000.0\n","745.6998715822701\n","745.6998715822701\n","1e-05\n","1e-05\n","4.4482216152605\n","4.4482216152605\n","9.80665\n","9.80665\n"]}]},{"cell_type":"code","source":["print(constants.speed_of_light)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hpe0YM54_tLV","executionInfo":{"status":"ok","timestamp":1646364938219,"user_tz":-330,"elapsed":7,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"81f465c6-0c76-4b2b-a9b9-9abfb6b1ea83"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["299792458.0\n"]}]},{"cell_type":"markdown","source":["**SciPy Optimizers**\n","\n","**Optimizers in SciPy**\n","\n","Optimizers are a set of procedures defined in SciPy that either find the minimum value of a function, or the root of an equation."],"metadata":{"id":"rhYGsCQ7AJgp"}},{"cell_type":"markdown","source":["**Optimizing Functions**\n","\n","Essentially, all of the algorithms in Machine Learning are nothing more than a complex equation that needs to be minimized with the help of given data."],"metadata":{"id":"FCERvHFkAVFJ"}},{"cell_type":"code","source":["from scipy.optimize import root\n","from math import sin\n","\n","def eqn(x):\n","  return x+cos(x)\n","root=root(eqn,0)\n","print(root.x)\n","print(root)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yTX1K8DQ_0qa","executionInfo":{"status":"ok","timestamp":1646365300098,"user_tz":-330,"elapsed":519,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"69712b6f-3e98-41b5-db3e-a865b5bd1084"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["[-0.73908513]\n","    fjac: array([[-1.]])\n","     fun: array([0.])\n"," message: 'The solution converged.'\n","    nfev: 9\n","     qtf: array([-2.66786593e-13])\n","       r: array([-1.67361202])\n","  status: 1\n"," success: True\n","       x: array([-0.73908513])\n"]}]},{"cell_type":"markdown","source":["**Minimizing a Function**\n","\n","A function, in this context, represents a curve, curves have high points and low points.\n","\n","High points are called maxima.\n","\n","Low points are called minima.\n","\n","The highest point in the whole curve is called global maxima, whereas the rest of them are called local maxima.\n","\n","The lowest point in whole curve is called global minima, whereas the rest of them are called local minima."],"metadata":{"id":"3S2Y3f6zBPw4"}},{"cell_type":"code","source":["from scipy.optimize import minimize\n","def eqn(x):\n","  return x**2+x+2\n","\n","mymin=minimize(eqn,0,method=\"BFGS\")\n","\n","print(mymin)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GUJL7HQWAxpc","executionInfo":{"status":"ok","timestamp":1646365474060,"user_tz":-330,"elapsed":8,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"5bfdb781-76d1-4a57-96a0-376f45304bbb"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["      fun: 1.75\n"," hess_inv: array([[0.50000001]])\n","      jac: array([0.])\n","  message: 'Optimization terminated successfully.'\n","     nfev: 12\n","      nit: 2\n","     njev: 4\n","   status: 0\n","  success: True\n","        x: array([-0.50000001])\n"]}]},{"cell_type":"markdown","source":["**SciPy Sparse Data**\n","\n","**What is Sparse Data**\n","\n","Sparse data is data that has mostly unused elements (elements that don't carry any information ).\n","\n","It can be an array like this one:\n","\n","[1, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0]\n","\n","**Sparse Data:** is a data set where most of the item values are zero.\n","\n","**Dense Array:** is the opposite of a sparse array: most of the values are not zero.\n","\n","In scientific computing, when we are dealing with partial derivatives in linear algebra we will come across sparse data.\n","\n"],"metadata":{"id":"uXiJb2OLCXCi"}},{"cell_type":"markdown","source":["**How to Work With Sparse Data**\n","\n","SciPy has a module, scipy.sparse that provides functions to deal with sparse data.\n","\n","There are primarily two types of sparse matrices that we use:\n","\n","**CSC** - Compressed Sparse Column. For efficient arithmetic, fast column slicing.\n","\n","**CSR** - Compressed Sparse Row. For fast row slicing, faster matrix vector products\n","\n","**CSR Matrix**\n","We can create CSR matrix by passing an arrray into function scipy.sparse.csr_matrix()."],"metadata":{"id":"EdZhkp_CCrjn"}},{"cell_type":"code","source":["from scipy.sparse import csr_matrix\n","import numpy as np\n","arr = np.array([0, 0, 0, 0, 0, 1, 1, 0, 2])\n","print(csr_matrix(arr))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iV_WtnYaB3nX","executionInfo":{"status":"ok","timestamp":1646366164103,"user_tz":-330,"elapsed":6,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"38948656-cc4f-474b-a2b8-56af1d24364b"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["  (0, 5)\t1\n","  (0, 6)\t1\n","  (0, 8)\t2\n"]}]},{"cell_type":"code","source":["arr = np.array([[0, 0, 0], [0, 0, 1], [1, 0, 2]])\n","print(csr_matrix(arr).data)\n","print(csr_matrix(arr).count_nonzero())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jvX4CXtTEMTZ","executionInfo":{"status":"ok","timestamp":1646366405317,"user_tz":-330,"elapsed":534,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"a89c3d1a-fdb8-48f0-852b-f63f73a06be1"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 1 2]\n","3\n"]}]},{"cell_type":"code","source":["# elimination of zeros\n","mat=csr_matrix(arr)\n","mat.eliminate_zeros()\n","print(mat)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9N_Cg3niFEba","executionInfo":{"status":"ok","timestamp":1646366566373,"user_tz":-330,"elapsed":418,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"409464f0-0944-4056-93a7-0d40855d4fd3"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["  (1, 2)\t1\n","  (2, 0)\t1\n","  (2, 2)\t2\n"]}]},{"cell_type":"code","source":["# elimination of zeros\n","mat=csr_matrix(arr)\n","mat.sum_duplicates()\n","print(mat)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H9FQ9FNAFt3o","executionInfo":{"status":"ok","timestamp":1646366625153,"user_tz":-330,"elapsed":416,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"ff0d42b0-68fb-45dc-c525-e8ca0bf75105"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["  (1, 2)\t1\n","  (2, 0)\t1\n","  (2, 2)\t2\n"]}]},{"cell_type":"code","source":["# csr to csc \n","new=csr_matrix(arr).tocsc()\n","print(new)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x-xgz4Y7GQee","executionInfo":{"status":"ok","timestamp":1646366693249,"user_tz":-330,"elapsed":6,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"c9f2cf2d-0b21-46c8-cd5e-66020415945d"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["  (2, 0)\t1\n","  (1, 2)\t1\n","  (2, 2)\t2\n"]}]},{"cell_type":"markdown","source":["**Working with Graphs**\n","\n","Graphs are an essential data structure.\n","\n","SciPy provides us with the module scipy.sparse.csgraph for working with such data structures."],"metadata":{"id":"YfknGf2cto9_"}},{"cell_type":"markdown","source":["**Adjacency Matrix**\n","\n","Adjacency matrix is a nxn matrix where n is the number of elements in a graph.\n","\n","And the values represents the connection between the elements."],"metadata":{"id":"y5DaSX1vt0SR"}},{"cell_type":"markdown","source":["**Connected Components**\n","\n","Find all of the connected components with the connected_components() method."],"metadata":{"id":"CGF3EqiQU6Qr"}},{"cell_type":"code","source":["import numpy as np\n","from scipy.sparse.csgraph import connected_components\n","from scipy.sparse import csr_matrix\n","\n","arr = np.array([\n","  [0, 1, 2],\n","  [1, 0, 0],\n","  [2, 0, 0]\n","])\n","\n","newarr = csr_matrix(arr)\n","\n","print(connected_components(newarr))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"keGFE2FAU9Xe","executionInfo":{"status":"ok","timestamp":1646404075874,"user_tz":-330,"elapsed":9,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"6322e7a4-029f-4cb9-8695-d8c6d0fa5825"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, array([0, 0, 0], dtype=int32))\n"]}]},{"cell_type":"markdown","source":["**Dijkstra**\n","\n","Use the dijkstra method to find the shortest path in a graph from one element to another.\n","\n","It takes following arguments:\n","\n","return_predecessors: boolean (True to return whole path of traversal otherwise False).\n","indices: index of the element to return all paths from that element only.\n","limit: max weight of path."],"metadata":{"id":"V1lPEKOiVLY8"}},{"cell_type":"code","source":["import numpy as np\n","from scipy.sparse.csgraph import dijkstra\n","from scipy.sparse import csr_matrix\n","\n","arr = np.array([\n","  [0, 1, 2],\n","  [1, 0, 0],\n","  [2, 0, 0]\n","])\n","\n","newarr = csr_matrix(arr)\n","\n","print(dijkstra(newarr, return_predecessors=True, indices=0))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4XpFrUabVCeU","executionInfo":{"status":"ok","timestamp":1646404114471,"user_tz":-330,"elapsed":26,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"d1368eab-e9f6-4be5-e6bc-fb7002467c6d"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["(array([0., 1., 2.]), array([-9999,     0,     0], dtype=int32))\n"]}]},{"cell_type":"markdown","source":["**Floyd Warshall**\n","\n","Use the floyd_warshall() method to find shortest path between all pairs of elements."],"metadata":{"id":"TYSPOquPVUeN"}},{"cell_type":"code","source":["import numpy as np\n","from scipy.sparse.csgraph import floyd_warshall\n","from scipy.sparse import csr_matrix\n","\n","arr = np.array([\n","  [0, 1, 2],\n","  [1, 0, 0],\n","  [2, 0, 0]\n","])\n","\n","newarr = csr_matrix(arr)\n","\n","print(floyd_warshall(newarr, return_predecessors=True))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vm907CWiVQlV","executionInfo":{"status":"ok","timestamp":1646404147972,"user_tz":-330,"elapsed":637,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"2ed06a1c-7337-49a0-c114-5846001895c1"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["(array([[0., 1., 2.],\n","       [1., 0., 3.],\n","       [2., 3., 0.]]), array([[-9999,     0,     0],\n","       [    1, -9999,     0],\n","       [    2,     0, -9999]], dtype=int32))\n"]}]},{"cell_type":"markdown","source":["**Bellman Ford**\n","\n","The bellman_ford() method can also find the shortest path between all pairs of elements, but this method can handle negative weights as well."],"metadata":{"id":"L3mmppkPVeh2"}},{"cell_type":"code","source":["import numpy as np\n","from scipy.sparse.csgraph import bellman_ford\n","from scipy.sparse import csr_matrix\n","\n","arr = np.array([\n","  [0, -1, 2],\n","  [1, 0, 0],\n","  [2, 0, 0]\n","])\n","\n","newarr = csr_matrix(arr)\n","\n","print(bellman_ford(newarr, return_predecessors=True, indices=0))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D8VlHdVgVZMp","executionInfo":{"status":"ok","timestamp":1646404203257,"user_tz":-330,"elapsed":1106,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"d9eb0db6-08e2-4564-ace7-08be9ba080e8"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["(array([ 0., -1.,  2.]), array([-9999,     0,     0], dtype=int32))\n"]}]},{"cell_type":"markdown","source":["**Depth First Order**\n","\n","The depth_first_order() method returns a depth first traversal from a node.\n","\n","This function takes following arguments:\n","\n","the graph.\n","the starting element to traverse graph from."],"metadata":{"id":"gP91g-CyVqwC"}},{"cell_type":"code","source":["import numpy as np\n","from scipy.sparse.csgraph import depth_first_order\n","from scipy.sparse import csr_matrix\n","\n","arr = np.array([\n","  [0, 1, 0, 1],\n","  [1, 1, 1, 1],\n","  [2, 1, 1, 0],\n","  [0, 1, 0, 1]\n","])\n","\n","newarr = csr_matrix(arr)\n","\n","print(depth_first_order(newarr, 1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bg3U0rkVVmj0","executionInfo":{"status":"ok","timestamp":1646404238584,"user_tz":-330,"elapsed":2159,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"cce31f51-30bb-4f86-a2dd-fb40ce4e813b"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["(array([1, 0, 3, 2], dtype=int32), array([    1, -9999,     1,     0], dtype=int32))\n"]}]},{"cell_type":"markdown","source":["**Breadth First Order**\n","\n","The breadth_first_order() method returns a breadth first traversal from a node.\n","\n","This function takes following arguments:\n","\n","the graph.\n","the starting element to traverse graph from."],"metadata":{"id":"CM36Ist6VyWP"}},{"cell_type":"code","source":["import numpy as np\n","from scipy.sparse.csgraph import breadth_first_order\n","from scipy.sparse import csr_matrix\n","\n","arr = np.array([\n","  [0, 1, 0, 1],\n","  [1, 1, 1, 1],\n","  [2, 1, 1, 0],\n","  [0, 1, 0, 1]\n","])\n","\n","newarr = csr_matrix(arr)\n","\n","print(breadth_first_order(newarr, 1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5JhfX9VYVu9v","executionInfo":{"status":"ok","timestamp":1646404272047,"user_tz":-330,"elapsed":592,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"e00e7800-07ea-47e0-81b5-bf9bee460446"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["(array([1, 0, 2, 3], dtype=int32), array([    1, -9999,     1,     1], dtype=int32))\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"Zyvpk5LwV3VG"},"execution_count":null,"outputs":[]}]}