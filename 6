{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"6","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMNOgvC2Sn8sTtGg0knZBgH"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**What is Pandas?**\n","\n","Pandas is a Python library used for working with data sets.\n","\n","It has functions for analyzing, cleaning, exploring, and manipulating data.\n","\n","The name \"Pandas\" has a reference to both \"Panel Data\", and \"Python Data Analysis\" and was created by Wes McKinney in 2008."],"metadata":{"id":"0KaIoLHt7vsS"}},{"cell_type":"markdown","source":["**Why Use Pandas?**\n","\n","Pandas allows us to analyze big data and make conclusions based on statistical theories.\n","\n","Pandas can clean messy data sets, and make them readable and relevant.\n","\n","Relevant data is very important in data science."],"metadata":{"id":"NAiMp3aF76i5"}},{"cell_type":"markdown","source":["**Data Science**: is a branch of computer science where we study how to store, use and analyze data for deriving information from it.\n","\n","**What Can Pandas Do?**\n","\n","Pandas gives you answers about the data. Like:\n","\n","Is there a correlation between two or more columns?\n","What is average value?\n","Max value?\n","Min value?\n","Pandas are also able to delete rows that are not relevant, or contains wrong values, like empty or NULL values. This is called cleaning the data.\n","\n","**Where is the Pandas Codebase?**\n","\n","The source code for Pandas is located at this github repository https://github.com/pandas-dev/pandas\n","\n","github: enables many people to work on the same codebase."],"metadata":{"id":"SIfGlnql8E75"}},{"cell_type":"code","source":["# starting with pandas \n","import pandas as pd \n","d={\"cars\":[\"BMW\",\"VOLVO\",\"FORD\"],\n","   \"passings\":[3,7,2]}\n","\n","var=pd.DataFrame(d)\n","print(var)\n","\n","# checking pandas version\n","\n","print(pd.__version__)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5BQRbjXB7x0c","executionInfo":{"status":"ok","timestamp":1646238573401,"user_tz":-330,"elapsed":934,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"53a7a750-cb59-4e6c-f9fe-c8dd5197746b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["    cars  passings\n","0    BMW         3\n","1  VOLVO         7\n","2   FORD         2\n","1.3.5\n"]}]},{"cell_type":"markdown","source":["**What is a Series?**\n","\n","A Pandas Series is like a column in a table.\n","\n","It is a one-dimensional array holding data of any type."],"metadata":{"id":"qp-v-Zll9vF3"}},{"cell_type":"code","source":["a=[0,1,2,3,4,5,6,7]\n","var=pd.Series(a)\n","print(var)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UqgsHS1O8-of","executionInfo":{"status":"ok","timestamp":1646238578805,"user_tz":-330,"elapsed":459,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"e51f8c84-17b1-4643-ca2a-6bf5fa4d2282"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0    0\n","1    1\n","2    2\n","3    3\n","4    4\n","5    5\n","6    6\n","7    7\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["**Labels**\n","\n","If nothing else is specified, the values are labeled with their index number. First value has index 0, second value has index 1 etc.\n","\n","This label can be used to access a specified value."],"metadata":{"id":"ZS6IpftJAC15"}},{"cell_type":"code","source":["print(var[2])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hDd3jXc1_4rz","executionInfo":{"status":"ok","timestamp":1646238583478,"user_tz":-330,"elapsed":462,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"c40a26bf-611b-4593-fb88-25d5903f4508"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2\n"]}]},{"cell_type":"markdown","source":["**Create Labels**\n","\n","With the index argument, you can name your own labels."],"metadata":{"id":"JjewIrR0ANqS"}},{"cell_type":"code","source":["a=[1,2,1]\n","var=pd.Series(a,index=[\"A\",\"B\",\"C\"])\n","print(var[\"B\"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jhmUIci8AJ5x","executionInfo":{"status":"ok","timestamp":1646238584872,"user_tz":-330,"elapsed":693,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"a70debce-3d30-4de6-aaa9-59a41c2c1838"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2\n"]}]},{"cell_type":"markdown","source":["**Key/Value Objects as Series**\n","\n","You can also use a key/value object, like a dictionary, when creating a Series."],"metadata":{"id":"8wysmGXYAwHy"}},{"cell_type":"code","source":["import pandas as pd\n","c={\"day1\":420,\"day2\":380,\"day3\":390}\n","\n","var1=pd.Series(c)\n","var2=pd.Series(c,index=[\"day1\",\"day2\"])\n","\n","print(var1)\n","print(var2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lMn3_x9hAkFD","executionInfo":{"status":"ok","timestamp":1646238588657,"user_tz":-330,"elapsed":422,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"e3cac280-3937-41a0-effc-be14f67201c6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["day1    420\n","day2    380\n","day3    390\n","dtype: int64\n","day1    420\n","day2    380\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["**DataFrames**\n","\n","Data sets in Pandas are usually multi-dimensional tables, called DataFrames.\n","\n","Series is like a column, a DataFrame is the whole table."],"metadata":{"id":"o71W8Iw8Bbd0"}},{"cell_type":"code","source":["c={\"calories\":[420,380,390],\"duration\":[50,40,45]}\n","var1=pd.DataFrame(c)\n","print(var1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IoF45ejdBGLO","executionInfo":{"status":"ok","timestamp":1646238595420,"user_tz":-330,"elapsed":645,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"f0456cf6-66f9-4ab7-eba7-f689d0a06439"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   calories  duration\n","0       420        50\n","1       380        40\n","2       390        45\n"]}]},{"cell_type":"markdown","source":["**What is a DataFrame?**\n","\n","A Pandas DataFrame is a 2 dimensional data structure, like a 2 dimensional array, or a table with rows and columns."],"metadata":{"id":"YxBfRcc7dp7C"}},{"cell_type":"code","source":["import pandas as pd\n","d={\"calories\": [420, 380, 390],\n","  \"duration\": [50, 40, 45]}\n","df=pd.DataFrame(d,index=[\"A\",\"B\",\"C\"])\n","# named indexes using index argument\n","print(df)"],"metadata":{"id":"BhqMbeJ1B7tK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1646238925337,"user_tz":-330,"elapsed":510,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"57025638-362f-4564-cd4f-aa2db1e1c811"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   calories  duration\n","A       420        50\n","B       380        40\n","C       390        45\n"]}]},{"cell_type":"markdown","source":["**Locate Row**\n","\n","the DataFrame is like a table with rows and columns.\n","\n","Pandas use the loc attribute to return one or more specified row(s)"],"metadata":{"id":"vuLX7qIcedQY"}},{"cell_type":"code","source":["print(df.loc[[\"B\",\"C\"]])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YI7I3qoZeNIT","executionInfo":{"status":"ok","timestamp":1646238887145,"user_tz":-330,"elapsed":517,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"d9bf2aee-cd41-46d1-b595-bfe5bf772d43"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   calories  duration\n","B       380        40\n","C       390        45\n"]}]},{"cell_type":"markdown","source":["**Pandas Read CSV**\n","\n","**Read CSV Files**\n","\n","A simple way to store big data sets is to use CSV files (comma separated files).\n","\n","CSV files contains plain text and is a well know format that can be read by everyone including Pandas.\n"],"metadata":{"id":"AIQtTmnJfndq"}},{"cell_type":"code","source":["import pandas as pd\n","df=pd.read_csv(\"data.csv\")\n","print(df)\n","# use to_string() to print the entire DataFrame."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GC8GgF3TeoUT","executionInfo":{"status":"ok","timestamp":1646239640500,"user_tz":-330,"elapsed":826,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"8fc33273-1037-4db7-eb86-1a3bcb157dcf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     Duration  Pulse  Maxpulse  Calories\n","0          60    110       130     409.1\n","1          60    117       145     479.0\n","2          60    103       135     340.0\n","3          45    109       175     282.4\n","4          45    117       148     406.0\n","..        ...    ...       ...       ...\n","164        60    105       140     290.8\n","165        60    110       145     300.0\n","166        60    115       145     310.2\n","167        75    120       150     320.4\n","168        75    125       150     330.4\n","\n","[169 rows x 4 columns]\n"]}]},{"cell_type":"markdown","source":["**max_rows**\n","\n","The number of rows returned is defined in Pandas option settings.\n","\n","You can check your system's maximum rows with the pd.options.display.max_rows statement."],"metadata":{"id":"LAM88HMRhkSc"}},{"cell_type":"code","source":["print(pd.options.display.max_rows)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gw_daPgmgz7l","executionInfo":{"status":"ok","timestamp":1646239646847,"user_tz":-330,"elapsed":452,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"c874cdca-a22e-488c-cddf-df7ec1db3f6d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["60\n"]}]},{"cell_type":"code","source":["# increase no.of max_rows\n","pd.options.display.max_rows=999\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FmMXZCjUhycM","executionInfo":{"status":"ok","timestamp":1646239743219,"user_tz":-330,"elapsed":711,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"0fa5de4e-33c0-421c-c000-98135cd4fe61"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     Duration  Pulse  Maxpulse  Calories\n","0          60    110       130     409.1\n","1          60    117       145     479.0\n","2          60    103       135     340.0\n","3          45    109       175     282.4\n","4          45    117       148     406.0\n","5          60    102       127     300.0\n","6          60    110       136     374.0\n","7          45    104       134     253.3\n","8          30    109       133     195.1\n","9          60     98       124     269.0\n","10         60    103       147     329.3\n","11         60    100       120     250.7\n","12         60    106       128     345.3\n","13         60    104       132     379.3\n","14         60     98       123     275.0\n","15         60     98       120     215.2\n","16         60    100       120     300.0\n","17         45     90       112       NaN\n","18         60    103       123     323.0\n","19         45     97       125     243.0\n","20         60    108       131     364.2\n","21         45    100       119     282.0\n","22         60    130       101     300.0\n","23         45    105       132     246.0\n","24         60    102       126     334.5\n","25         60    100       120     250.0\n","26         60     92       118     241.0\n","27         60    103       132       NaN\n","28         60    100       132     280.0\n","29         60    102       129     380.3\n","30         60     92       115     243.0\n","31         45     90       112     180.1\n","32         60    101       124     299.0\n","33         60     93       113     223.0\n","34         60    107       136     361.0\n","35         60    114       140     415.0\n","36         60    102       127     300.0\n","37         60    100       120     300.0\n","38         60    100       120     300.0\n","39         45    104       129     266.0\n","40         45     90       112     180.1\n","41         60     98       126     286.0\n","42         60    100       122     329.4\n","43         60    111       138     400.0\n","44         60    111       131     397.0\n","45         60     99       119     273.0\n","46         60    109       153     387.6\n","47         45    111       136     300.0\n","48         45    108       129     298.0\n","49         60    111       139     397.6\n","50         60    107       136     380.2\n","51         80    123       146     643.1\n","52         60    106       130     263.0\n","53         60    118       151     486.0\n","54         30    136       175     238.0\n","55         60    121       146     450.7\n","56         60    118       121     413.0\n","57         45    115       144     305.0\n","58         20    153       172     226.4\n","59         45    123       152     321.0\n","60        210    108       160    1376.0\n","61        160    110       137    1034.4\n","62        160    109       135     853.0\n","63         45    118       141     341.0\n","64         20    110       130     131.4\n","65        180     90       130     800.4\n","66        150    105       135     873.4\n","67        150    107       130     816.0\n","68         20    106       136     110.4\n","69        300    108       143    1500.2\n","70        150     97       129    1115.0\n","71         60    109       153     387.6\n","72         90    100       127     700.0\n","73        150     97       127     953.2\n","74         45    114       146     304.0\n","75         90     98       125     563.2\n","76         45    105       134     251.0\n","77         45    110       141     300.0\n","78        120    100       130     500.4\n","79        270    100       131    1729.0\n","80         30    159       182     319.2\n","81         45    149       169     344.0\n","82         30    103       139     151.1\n","83        120    100       130     500.0\n","84         45    100       120     225.3\n","85         30    151       170     300.0\n","86         45    102       136     234.0\n","87        120    100       157    1000.1\n","88         45    129       103     242.0\n","89         20     83       107      50.3\n","90        180    101       127     600.1\n","91         45    107       137       NaN\n","92         30     90       107     105.3\n","93         15     80       100      50.5\n","94         20    150       171     127.4\n","95         20    151       168     229.4\n","96         30     95       128     128.2\n","97         25    152       168     244.2\n","98         30    109       131     188.2\n","99         90     93       124     604.1\n","100        20     95       112      77.7\n","101        90     90       110     500.0\n","102        90     90       100     500.0\n","103        90     90       100     500.4\n","104        30     92       108      92.7\n","105        30     93       128     124.0\n","106       180     90       120     800.3\n","107        30     90       120      86.2\n","108        90     90       120     500.3\n","109       210    137       184    1860.4\n","110        60    102       124     325.2\n","111        45    107       124     275.0\n","112        15    124       139     124.2\n","113        45    100       120     225.3\n","114        60    108       131     367.6\n","115        60    108       151     351.7\n","116        60    116       141     443.0\n","117        60     97       122     277.4\n","118        60    105       125       NaN\n","119        60    103       124     332.7\n","120        30    112       137     193.9\n","121        45    100       120     100.7\n","122        60    119       169     336.7\n","123        60    107       127     344.9\n","124        60    111       151     368.5\n","125        60     98       122     271.0\n","126        60     97       124     275.3\n","127        60    109       127     382.0\n","128        90     99       125     466.4\n","129        60    114       151     384.0\n","130        60    104       134     342.5\n","131        60    107       138     357.5\n","132        60    103       133     335.0\n","133        60    106       132     327.5\n","134        60    103       136     339.0\n","135        20    136       156     189.0\n","136        45    117       143     317.7\n","137        45    115       137     318.0\n","138        45    113       138     308.0\n","139        20    141       162     222.4\n","140        60    108       135     390.0\n","141        60     97       127       NaN\n","142        45    100       120     250.4\n","143        45    122       149     335.4\n","144        60    136       170     470.2\n","145        45    106       126     270.8\n","146        60    107       136     400.0\n","147        60    112       146     361.9\n","148        30    103       127     185.0\n","149        60    110       150     409.4\n","150        60    106       134     343.0\n","151        60    109       129     353.2\n","152        60    109       138     374.0\n","153        30    150       167     275.8\n","154        60    105       128     328.0\n","155        60    111       151     368.5\n","156        60     97       131     270.4\n","157        60    100       120     270.4\n","158        60    114       150     382.8\n","159        30     80       120     240.9\n","160        30     85       120     250.4\n","161        45     90       130     260.4\n","162        45     95       130     270.0\n","163        45    100       140     280.9\n","164        60    105       140     290.8\n","165        60    110       145     300.0\n","166        60    115       145     310.2\n","167        75    120       150     320.4\n","168        75    125       150     330.4\n"]}]},{"cell_type":"markdown","source":["**Pandas Read JSON**\n","\n","**Read JSON**\n","\n","Big data sets are often stored, or extracted as JSON.\n","\n","JSON is plain text, but has the format of an object, and is well known in the world of programming, including Pandas."],"metadata":{"id":"u6vSmXFKiwz-"}},{"cell_type":"code","source":["import pandas as pd\n","\n","a=pd.read_json(\"data.json\")\n","\n","print(a.to_string())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rjbZ6M4NiK3R","executionInfo":{"status":"ok","timestamp":1646240076276,"user_tz":-330,"elapsed":5,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"5afaff26-2561-4159-935f-df291646cd39"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     Duration  Pulse  Maxpulse  Calories\n","0          60    110       130     409.1\n","1          60    117       145     479.0\n","2          60    103       135     340.0\n","3          45    109       175     282.4\n","4          45    117       148     406.0\n","5          60    102       127     300.5\n","6          60    110       136     374.0\n","7          45    104       134     253.3\n","8          30    109       133     195.1\n","9          60     98       124     269.0\n","10         60    103       147     329.3\n","11         60    100       120     250.7\n","12         60    106       128     345.3\n","13         60    104       132     379.3\n","14         60     98       123     275.0\n","15         60     98       120     215.2\n","16         60    100       120     300.0\n","17         45     90       112       NaN\n","18         60    103       123     323.0\n","19         45     97       125     243.0\n","20         60    108       131     364.2\n","21         45    100       119     282.0\n","22         60    130       101     300.0\n","23         45    105       132     246.0\n","24         60    102       126     334.5\n","25         60    100       120     250.0\n","26         60     92       118     241.0\n","27         60    103       132       NaN\n","28         60    100       132     280.0\n","29         60    102       129     380.3\n","30         60     92       115     243.0\n","31         45     90       112     180.1\n","32         60    101       124     299.0\n","33         60     93       113     223.0\n","34         60    107       136     361.0\n","35         60    114       140     415.0\n","36         60    102       127     300.5\n","37         60    100       120     300.1\n","38         60    100       120     300.0\n","39         45    104       129     266.0\n","40         45     90       112     180.1\n","41         60     98       126     286.0\n","42         60    100       122     329.4\n","43         60    111       138     400.0\n","44         60    111       131     397.0\n","45         60     99       119     273.0\n","46         60    109       153     387.6\n","47         45    111       136     300.0\n","48         45    108       129     298.0\n","49         60    111       139     397.6\n","50         60    107       136     380.2\n","51         80    123       146     643.1\n","52         60    106       130     263.0\n","53         60    118       151     486.0\n","54         30    136       175     238.0\n","55         60    121       146     450.7\n","56         60    118       121     413.0\n","57         45    115       144     305.0\n","58         20    153       172     226.4\n","59         45    123       152     321.0\n","60        210    108       160    1376.0\n","61        160    110       137    1034.4\n","62        160    109       135     853.0\n","63         45    118       141     341.0\n","64         20    110       130     131.4\n","65        180     90       130     800.4\n","66        150    105       135     873.4\n","67        150    107       130     816.0\n","68         20    106       136     110.4\n","69        300    108       143    1500.2\n","70        150     97       129    1115.0\n","71         60    109       153     387.6\n","72         90    100       127     700.0\n","73        150     97       127     953.2\n","74         45    114       146     304.0\n","75         90     98       125     563.2\n","76         45    105       134     251.0\n","77         45    110       141     300.0\n","78        120    100       130     500.4\n","79        270    100       131    1729.0\n","80         30    159       182     319.2\n","81         45    149       169     344.0\n","82         30    103       139     151.1\n","83        120    100       130     500.0\n","84         45    100       120     225.3\n","85         30    151       170     300.1\n","86         45    102       136     234.0\n","87        120    100       157    1000.1\n","88         45    129       103     242.0\n","89         20     83       107      50.3\n","90        180    101       127     600.1\n","91         45    107       137       NaN\n","92         30     90       107     105.3\n","93         15     80       100      50.5\n","94         20    150       171     127.4\n","95         20    151       168     229.4\n","96         30     95       128     128.2\n","97         25    152       168     244.2\n","98         30    109       131     188.2\n","99         90     93       124     604.1\n","100        20     95       112      77.7\n","101        90     90       110     500.0\n","102        90     90       100     500.0\n","103        90     90       100     500.4\n","104        30     92       108      92.7\n","105        30     93       128     124.0\n","106       180     90       120     800.3\n","107        30     90       120      86.2\n","108        90     90       120     500.3\n","109       210    137       184    1860.4\n","110        60    102       124     325.2\n","111        45    107       124     275.0\n","112        15    124       139     124.2\n","113        45    100       120     225.3\n","114        60    108       131     367.6\n","115        60    108       151     351.7\n","116        60    116       141     443.0\n","117        60     97       122     277.4\n","118        60    105       125       NaN\n","119        60    103       124     332.7\n","120        30    112       137     193.9\n","121        45    100       120     100.7\n","122        60    119       169     336.7\n","123        60    107       127     344.9\n","124        60    111       151     368.5\n","125        60     98       122     271.0\n","126        60     97       124     275.3\n","127        60    109       127     382.0\n","128        90     99       125     466.4\n","129        60    114       151     384.0\n","130        60    104       134     342.5\n","131        60    107       138     357.5\n","132        60    103       133     335.0\n","133        60    106       132     327.5\n","134        60    103       136     339.0\n","135        20    136       156     189.0\n","136        45    117       143     317.7\n","137        45    115       137     318.0\n","138        45    113       138     308.0\n","139        20    141       162     222.4\n","140        60    108       135     390.0\n","141        60     97       127       NaN\n","142        45    100       120     250.4\n","143        45    122       149     335.4\n","144        60    136       170     470.2\n","145        45    106       126     270.8\n","146        60    107       136     400.0\n","147        60    112       146     361.9\n","148        30    103       127     185.0\n","149        60    110       150     409.4\n","150        60    106       134     343.0\n","151        60    109       129     353.2\n","152        60    109       138     374.0\n","153        30    150       167     275.8\n","154        60    105       128     328.0\n","155        60    111       151     368.5\n","156        60     97       131     270.4\n","157        60    100       120     270.4\n","158        60    114       150     382.8\n","159        30     80       120     240.9\n","160        30     85       120     250.4\n","161        45     90       130     260.4\n","162        45     95       130     270.0\n","163        45    100       140     280.9\n","164        60    105       140     290.8\n","165        60    110       145     300.4\n","166        60    115       145     310.2\n","167        75    120       150     320.4\n","168        75    125       150     330.4\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","data = {\n","  \"Duration\":{\n","    \"0\":60,\n","    \"1\":60,\n","    \"2\":60,\n","    \"3\":45,\n","    \"4\":45,\n","    \"5\":60\n","  },\n","  \"Pulse\":{\n","    \"0\":110,\n","    \"1\":117,\n","    \"2\":103,\n","    \"3\":109,\n","    \"4\":117,\n","    \"5\":102\n","  },\n","  \"Maxpulse\":{\n","    \"0\":130,\n","    \"1\":145,\n","    \"2\":135,\n","    \"3\":175,\n","    \"4\":148,\n","    \"5\":127\n","  },\n","  \"Calories\":{\n","    \"0\":409,\n","    \"1\":479,\n","    \"2\":340,\n","    \"3\":282,\n","    \"4\":406,\n","    \"5\":300\n","  }\n","}\n","\n","df=pd.DataFrame(data)\n","\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hubCOe7UjYP7","executionInfo":{"status":"ok","timestamp":1646240281377,"user_tz":-330,"elapsed":439,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"a2b95d66-859a-43c0-a64b-899c53ed2c34"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   Duration  Pulse  Maxpulse  Calories\n","0        60    110       130       409\n","1        60    117       145       479\n","2        60    103       135       340\n","3        45    109       175       282\n","4        45    117       148       406\n","5        60    102       127       300\n"]}]},{"cell_type":"markdown","source":["**Pandas - Analyzing DataFrames**\n","\n","**Viewing the Data**\n","\n","One of the most used method for getting a quick overview of the DataFrame, is the head() method.\n","\n","The head() method returns the headers and a specified number of rows, starting from the top."],"metadata":{"id":"Z-hxitaNoVxK"}},{"cell_type":"code","source":["# head()\n","df=pd.read_csv(\"data.csv\")\n","print(df.head(5))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OP06F3W3kS6Y","executionInfo":{"status":"ok","timestamp":1646241615384,"user_tz":-330,"elapsed":440,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"5cb0560d-ea50-4ae8-8a79-989b3382d33a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   Duration  Pulse  Maxpulse  Calories\n","0        60    110       130     409.1\n","1        60    117       145     479.0\n","2        60    103       135     340.0\n","3        45    109       175     282.4\n","4        45    117       148     406.0\n"]}]},{"cell_type":"code","source":["# tail()\n","print(df.tail())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gNQEBbAMpHPG","executionInfo":{"status":"ok","timestamp":1646241667721,"user_tz":-330,"elapsed":451,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"05f97cd8-bf38-4d58-c684-a585afb664c3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     Duration  Pulse  Maxpulse  Calories\n","164        60    105       140     290.8\n","165        60    110       145     300.0\n","166        60    115       145     310.2\n","167        75    120       150     320.4\n","168        75    125       150     330.4\n"]}]},{"cell_type":"markdown","source":["**Info About the Data**\n","\n","The DataFrames object has a method called info(), that gives you more information about the data set."],"metadata":{"id":"xC78VFOKpq5r"}},{"cell_type":"code","source":["# info()\n","print(df.info())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PYYtGp7JplYb","executionInfo":{"status":"ok","timestamp":1646241734599,"user_tz":-330,"elapsed":479,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"e09deb50-f4d4-4a5c-eb0e-574225983401"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 169 entries, 0 to 168\n","Data columns (total 4 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   Duration  169 non-null    int64  \n"," 1   Pulse     169 non-null    int64  \n"," 2   Maxpulse  169 non-null    int64  \n"," 3   Calories  164 non-null    float64\n","dtypes: float64(1), int64(3)\n","memory usage: 5.4 KB\n","None\n"]}]},{"cell_type":"markdown","source":["**Data Cleaning**\n","\n","Data cleaning means fixing bad data in your data set.\n","\n","Bad data could be:\n","\n","*   Empty cells\n","*   Data in wrong format\n","*   Wrong data\n","*   Duplicates\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"52fyalomq00l"}},{"cell_type":"markdown","source":["**Empty Cells**\n","\n","Empty cells can potentially give you a wrong result when you analyze data.\n","\n","**Remove Rows**\n","\n","One way to deal with empty cells is to remove rows that contain empty cells.\n","\n","This is usually OK, since data sets can be very big, and removing a few rows will not have a big impact on the result."],"metadata":{"id":"qDbDZSxzrlQI"}},{"cell_type":"code","source":["# import pandas as pd\n","# df=pd.read_csv(\"data.csv\")\n","\n","# new_df=df.dropna()\n","\n","# print(new_df.to_string())\n","\n","#  the dropna() method returns a new DataFrame,\n","#  and will not change the original."],"metadata":{"id":"dLhVjQRop1ss"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# df=pd.read_csv(\"/content/dirtydata.csv\")\n","# print(df)"],"metadata":{"id":"ke1BYQhMsUJ-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# use the inplace = True argument \n","# Remove all rows with NULL values \n","# df=pd.read_csv(\"/content/dirtydata.csv\")\n","# df.dropna(inplace=True)\n","# print(df)"],"metadata":{"id":"8q6-m639tdcz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Replace Empty Values\n","# Another way of dealing with empty cells is to insert a\n","# new value instead.\n","# This way you do not have to delete entire rows just \n","# because of some empty cells.\n","# The fillna() method allows us to replace empty cells with \n","# a value\n","# import pandas as pd\n","\n","# df = pd.read_csv(\"/content/dirtydata.csv\")\n","# df.fillna(130,inplace=True)\n","# print(df)"],"metadata":{"id":"MaunW35atqbh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Replace Only For Specified Columns\n","# import pandas as pd\n","# df=pd.read_csv(\"/content/dirtydata.csv\")\n","# df[\"Calories\"].fillna(130,inplace=True)\n","# print(df)"],"metadata":{"id":"wLuyxAI5uX4G"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Replace Using Mean, Median, or Mode**\n","\n","A common way to replace empty cells, is to calculate the mean, median or mode value of the column.\n","\n","Pandas uses the mean() median() and mode() methods to calculate the respective values for a specified column"],"metadata":{"id":"Vz_kE4l8wfOb"}},{"cell_type":"code","source":["# import pandas as pd\n","# df=pd.read_csv(\"/content/dirtydata.csv\")\n","\n","# x=df[\"Calories\"].mean()\n","\n","# df.fillna(x, inplace = True)\n","\n","# print(x)\n","\n","# print(df.to_string())"],"metadata":{"id":"53BI7ekzvT4u"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Mean** = the average value (the sum of all values divided by number of values)."],"metadata":{"id":"4oFxfQ-SzDP2"}},{"cell_type":"code","source":["# import pandas as pd\n","# df=pd.read_csv(\"/content/dirtydata.csv\")\n","# x=df[\"Calories\"].median()\n","# df[\"Calories\"].fillna(x, inplace = True)\n","# print(x)\n","# print(df.to_string())"],"metadata":{"id":"0Ba4pBJSxBOQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Median** = the value in the middle, after you have sorted all values ascending."],"metadata":{"id":"2GMJv__9zrEx"}},{"cell_type":"code","source":["# import pandas as pd\n","# df = pd.read_csv(\"/content/dirtydata.csv\")\n","# x = df[\"Calories\"].mode()[0]\n","# df[\"Calories\"].fillna(x, inplace = True)\n","# print(x)\n","# print(df)"],"metadata":{"id":"SqM8WcJrzU5K"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Mode** = the value that appears most frequently."],"metadata":{"id":"pqW2bISZ0Mjs"}},{"cell_type":"markdown","source":["**Data of Wrong Format**\n","\n","Cells with data of wrong format can make it difficult, or even impossible, to analyze data.\n","\n","To fix it, you have two options: remove the rows, or convert all cells in the columns into the same format.\n","\n"],"metadata":{"id":"OMJyXFHo5tb9"}},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv('/content/sample_data/dirtydata.csv')\n","\n","df['Date'] = pd.to_datetime(df['Date'])\n","\n","print(df.to_string())"],"metadata":{"id":"D6jTN60Tz3W4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1646287885503,"user_tz":-330,"elapsed":517,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"df67260e-c255-464c-a622-9bed2a990e9b"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["    Duration       Date  Pulse  Maxpulse  Calories\n","0         60 2020-12-01    110       130     409.1\n","1         60 2020-12-02    117       145     479.0\n","2         60 2020-12-03    103       135     340.0\n","3         45 2020-12-04    109       175     282.4\n","4         45 2020-12-05    117       148     406.0\n","5         60 2020-12-06    102       127     300.0\n","6         60 2020-12-07    110       136     374.0\n","7        450 2020-12-08    104       134     253.3\n","8         30 2020-12-09    109       133     195.1\n","9         60 2020-12-10     98       124     269.0\n","10        60 2020-12-11    103       147     329.3\n","11        60 2020-12-12    100       120     250.7\n","12        60 2020-12-12    100       120     250.7\n","13        60 2020-12-13    106       128     345.3\n","14        60 2020-12-14    104       132     379.3\n","15        60 2020-12-15     98       123     275.0\n","16        60 2020-12-16     98       120     215.2\n","17        60 2020-12-17    100       120     300.0\n","18        45 2020-12-18     90       112       NaN\n","19        60 2020-12-19    103       123     323.0\n","20        45 2020-12-20     97       125     243.0\n","21        60 2020-12-21    108       131     364.2\n","22        45        NaT    100       119     282.0\n","23        60 2020-12-23    130       101     300.0\n","24        45 2020-12-24    105       132     246.0\n","25        60 2020-12-25    102       126     334.5\n","26        60 2020-12-26    100       120     250.0\n","27        60 2020-12-27     92       118     241.0\n","28        60 2020-12-28    103       132       NaN\n","29        60 2020-12-29    100       132     280.0\n","30        60 2020-12-30    102       129     380.3\n","31        60 2020-12-31     92       115     243.0\n"]}]},{"cell_type":"markdown","source":["**Removing Rows**\n","\n","The result from the converting in the example above gave us a NaT value, which can be handled as a NULL value, and we can remove the row by using the dropna() method."],"metadata":{"id":"a6Sh4tTlURhc"}},{"cell_type":"code","source":["# df.dropna(subset=[\"Date\"],inplace=True)\n","# print(df)"],"metadata":{"id":"lt2n0axQTlrR","executionInfo":{"status":"ok","timestamp":1646287875020,"user_tz":-330,"elapsed":3,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}}},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":["**Wrong Data**\n","\n","\"Wrong data\" does not have to be \"empty cells\" or \"wrong format\", it can just be wrong, like if someone registered \"199\" instead of \"1.99\".\n","\n","Sometimes you can spot wrong data by looking at the data set, because you have an expectation of what it should be."],"metadata":{"id":"o55J8-zoU0cO"}},{"cell_type":"markdown","source":["**Replacing Values**\n","\n","One way to fix wrong values is to replace them with something else."],"metadata":{"id":"RvwDRv4AYx6T"}},{"cell_type":"code","source":["# df.loc[7,\"Duration\"]=45\n","# print(df)"],"metadata":{"id":"vgjeXMYdUimK","executionInfo":{"status":"ok","timestamp":1646287820431,"user_tz":-330,"elapsed":8,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["for x in df.index:\n","  if df.loc[x,\"Duration\"]>120:\n","     df.loc[x,\"Duration\"]=120\n","\n","print(df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jm4XNkj3Y-Zi","executionInfo":{"status":"ok","timestamp":1646287895189,"user_tz":-330,"elapsed":503,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"1c616755-c729-4fc7-eace-97b5ddd2d256"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["    Duration       Date  Pulse  Maxpulse  Calories\n","0         60 2020-12-01    110       130     409.1\n","1         60 2020-12-02    117       145     479.0\n","2         60 2020-12-03    103       135     340.0\n","3         45 2020-12-04    109       175     282.4\n","4         45 2020-12-05    117       148     406.0\n","5         60 2020-12-06    102       127     300.0\n","6         60 2020-12-07    110       136     374.0\n","7        120 2020-12-08    104       134     253.3\n","8         30 2020-12-09    109       133     195.1\n","9         60 2020-12-10     98       124     269.0\n","10        60 2020-12-11    103       147     329.3\n","11        60 2020-12-12    100       120     250.7\n","12        60 2020-12-12    100       120     250.7\n","13        60 2020-12-13    106       128     345.3\n","14        60 2020-12-14    104       132     379.3\n","15        60 2020-12-15     98       123     275.0\n","16        60 2020-12-16     98       120     215.2\n","17        60 2020-12-17    100       120     300.0\n","18        45 2020-12-18     90       112       NaN\n","19        60 2020-12-19    103       123     323.0\n","20        45 2020-12-20     97       125     243.0\n","21        60 2020-12-21    108       131     364.2\n","22        45        NaT    100       119     282.0\n","23        60 2020-12-23    130       101     300.0\n","24        45 2020-12-24    105       132     246.0\n","25        60 2020-12-25    102       126     334.5\n","26        60 2020-12-26    100       120     250.0\n","27        60 2020-12-27     92       118     241.0\n","28        60 2020-12-28    103       132       NaN\n","29        60 2020-12-29    100       132     280.0\n","30        60 2020-12-30    102       129     380.3\n","31        60 2020-12-31     92       115     243.0\n"]}]},{"cell_type":"code","source":["for x in df.index:\n","  if df.loc[x, \"Duration\"] >= 120:\n","    df.drop(x, inplace = True)\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3A4Vxy2FZdD_","executionInfo":{"status":"ok","timestamp":1646287952579,"user_tz":-330,"elapsed":511,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"dec8348f-a7bf-4a1d-e790-37d205e2db4b"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["    Duration       Date  Pulse  Maxpulse  Calories\n","0         60 2020-12-01    110       130     409.1\n","1         60 2020-12-02    117       145     479.0\n","2         60 2020-12-03    103       135     340.0\n","3         45 2020-12-04    109       175     282.4\n","4         45 2020-12-05    117       148     406.0\n","5         60 2020-12-06    102       127     300.0\n","6         60 2020-12-07    110       136     374.0\n","8         30 2020-12-09    109       133     195.1\n","9         60 2020-12-10     98       124     269.0\n","10        60 2020-12-11    103       147     329.3\n","11        60 2020-12-12    100       120     250.7\n","12        60 2020-12-12    100       120     250.7\n","13        60 2020-12-13    106       128     345.3\n","14        60 2020-12-14    104       132     379.3\n","15        60 2020-12-15     98       123     275.0\n","16        60 2020-12-16     98       120     215.2\n","17        60 2020-12-17    100       120     300.0\n","18        45 2020-12-18     90       112       NaN\n","19        60 2020-12-19    103       123     323.0\n","20        45 2020-12-20     97       125     243.0\n","21        60 2020-12-21    108       131     364.2\n","22        45        NaT    100       119     282.0\n","23        60 2020-12-23    130       101     300.0\n","24        45 2020-12-24    105       132     246.0\n","25        60 2020-12-25    102       126     334.5\n","26        60 2020-12-26    100       120     250.0\n","27        60 2020-12-27     92       118     241.0\n","28        60 2020-12-28    103       132       NaN\n","29        60 2020-12-29    100       132     280.0\n","30        60 2020-12-30    102       129     380.3\n","31        60 2020-12-31     92       115     243.0\n"]}]},{"cell_type":"markdown","source":["**Discovering Duplicates**\n","\n","Duplicate rows are rows that have been registered more than one time.\n","\n"],"metadata":{"id":"Vij5mtpoJY3R"}},{"cell_type":"code","source":["# duplicated()\n","import pandas as pd\n","df=pd.read_csv(\"/content/dirtydata.csv\")\n","print(df.duplicated())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xZ7ac2DQaFTX","executionInfo":{"status":"ok","timestamp":1646317240899,"user_tz":-330,"elapsed":569,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"cbe56166-dd2f-4a3b-e941-b3cb5a010904"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["0     False\n","1     False\n","2     False\n","3     False\n","4     False\n","5     False\n","6     False\n","7     False\n","8     False\n","9     False\n","10    False\n","11    False\n","12     True\n","13    False\n","14    False\n","15    False\n","16    False\n","17    False\n","18    False\n","19    False\n","20    False\n","21    False\n","22    False\n","23    False\n","24    False\n","25    False\n","26    False\n","27    False\n","28    False\n","29    False\n","30    False\n","31    False\n","dtype: bool\n"]}]},{"cell_type":"markdown","source":["**Removing Duplicates**\n","\n","To remove duplicates, use the drop_duplicates() method."],"metadata":{"id":"td6q9f7fJ998"}},{"cell_type":"code","source":["df.drop_duplicates(inplace=True)\n","print(df.to_string())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ieythqKDJqHR","executionInfo":{"status":"ok","timestamp":1646317354050,"user_tz":-330,"elapsed":718,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"803a4898-481e-45bf-95ae-2bc74da3bc31"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["    Duration          Date  Pulse  Maxpulse  Calories\n","0         60  '2020/12/01'    110       130     409.1\n","1         60  '2020/12/02'    117       145     479.0\n","2         60  '2020/12/03'    103       135     340.0\n","3         45  '2020/12/04'    109       175     282.4\n","4         45  '2020/12/05'    117       148     406.0\n","5         60  '2020/12/06'    102       127     300.0\n","6         60  '2020/12/07'    110       136     374.0\n","7        450  '2020/12/08'    104       134     253.3\n","8         30  '2020/12/09'    109       133     195.1\n","9         60  '2020/12/10'     98       124     269.0\n","10        60  '2020/12/11'    103       147     329.3\n","11        60  '2020/12/12'    100       120     250.7\n","13        60  '2020/12/13'    106       128     345.3\n","14        60  '2020/12/14'    104       132     379.3\n","15        60  '2020/12/15'     98       123     275.0\n","16        60  '2020/12/16'     98       120     215.2\n","17        60  '2020/12/17'    100       120     300.0\n","18        45  '2020/12/18'     90       112       NaN\n","19        60  '2020/12/19'    103       123     323.0\n","20        45  '2020/12/20'     97       125     243.0\n","21        60  '2020/12/21'    108       131     364.2\n","22        45           NaN    100       119     282.0\n","23        60  '2020/12/23'    130       101     300.0\n","24        45  '2020/12/24'    105       132     246.0\n","25        60  '2020/12/25'    102       126     334.5\n","26        60      20201226    100       120     250.0\n","27        60  '2020/12/27'     92       118     241.0\n","28        60  '2020/12/28'    103       132       NaN\n","29        60  '2020/12/29'    100       132     280.0\n","30        60  '2020/12/30'    102       129     380.3\n","31        60  '2020/12/31'     92       115     243.0\n"]}]},{"cell_type":"markdown","source":["**Finding Relationships**\n","\n","A great aspect of the Pandas module is the corr() method.\n","\n","The corr() method calculates the relationship between each column in your data set."],"metadata":{"id":"oEZYUchXKoGq"}},{"cell_type":"code","source":["# corr()\n","import pandas as pd\n","df=pd.read_csv(\"/content/data (2).csv\")\n","print(df.corr())\n","# The corr() method ignores \"not numeric\" columns."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u_w0jAt2KOJS","executionInfo":{"status":"ok","timestamp":1646317585054,"user_tz":-330,"elapsed":5,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"a2c8f910-fbf9-41de-fc78-5a6fc2690541"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["          Duration     Pulse  Maxpulse  Calories\n","Duration  1.000000 -0.155408  0.009403  0.922717\n","Pulse    -0.155408  1.000000  0.786535  0.025121\n","Maxpulse  0.009403  0.786535  1.000000  0.203813\n","Calories  0.922717  0.025121  0.203813  1.000000\n"]}]},{"cell_type":"markdown","source":["**What is a good correlation?**\n","\n","It depends on the use, but I think it is safe to say you have to have at least 0.6 (or -0.6) to call it a good correlation."],"metadata":{"id":"pkNHLuZOLQ9s"}},{"cell_type":"markdown","source":["**Perfect Correlation:**\n","\n","We can see that \"Duration\" and \"Duration\" got the number 1.000000, which makes sense, each column always has a perfect relationship with itself.\n","\n","**Good Correlation:**\n","\n","\"Duration\" and \"Calories\" got a 0.922721 correlation, which is a very good correlation, and we can predict that the longer you work out, the more calories you burn, and the other way around: if you burned a lot of calories, you probably had a long work out.\n","\n","**Bad Correlation:**\n","\n","\"Duration\" and \"Maxpulse\" got a 0.009403 correlation, which is a very bad correlation, meaning that we can not predict the max pulse by just looking at the duration of the work out, and vice versa."],"metadata":{"id":"LTigf2GWLfFy"}},{"cell_type":"markdown","source":["**PANDAS POLTING**"],"metadata":{"id":"8CBfG8JNPRvr"}},{"cell_type":"code","source":["# line graph\n","import pandas as pd \n","import matplotlib.pyplot as plt\n","df=pd.read_csv(\"/content/data (2).csv\")\n","df.plot()\n","plt.title('LINE GRAPH')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"o-05Z7wBLetg","executionInfo":{"status":"ok","timestamp":1646318876817,"user_tz":-330,"elapsed":760,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"89ca1bc7-28bf-4bbe-9baa-1aa2830b3103"},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# scatter plot\n","df.plot(kind='scatter',x = 'Duration', y = 'Calories')\n","plt.title('SCATTER PLOT')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"Ummrze7qLD1o","executionInfo":{"status":"ok","timestamp":1646318939590,"user_tz":-330,"elapsed":1007,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"d1270358-1e33-42be-dfdd-33e52177a7a0"},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# histogram\n","df.plot(kind=\"hist\")\n","plt.title(\"HISTOGRAM\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"yQpQDsfOQWbd","executionInfo":{"status":"ok","timestamp":1646319181894,"user_tz":-330,"elapsed":719,"user":{"displayName":"47 Vansh Gurnani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiGZMJnyGt3NvdxW_M2VeYOKDN3Qry6Uji2Z6AU=s64","userId":"15947035871699732334"}},"outputId":"0d350ddb-9556-4d1b-8389-1223a7810943"},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[""],"metadata":{"id":"UcDsCv9LRRpw"},"execution_count":null,"outputs":[]}]}